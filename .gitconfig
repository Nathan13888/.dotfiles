[alias] ## Useful GIT commands https://github.com/joshnh/Git-Commands
## INFO
	st = status -sb -uall # shortened and more concise version of git status, -uall option isn't actually needed
	status = status --show-stash
	#versions = tags
	tags = tag -l --sort=version:refname # view all tags
	credit = shortlog -sn
## CUSTOM SHORTCUTS
    save = commit -a -m "Save"
    mer = merge
	mff = merge --ff-only
	mnff = merge --no-ff
	bra = branch -vv --all # view all branches in the current repository
	brv = bra # remove duplicate
	brd = branch -d
	brrm = brd
	brm = branch -m #<A> <B> rename branch from A to B
	cob = checkout -b # create new branch and switch to it
	remv = remote -vv
	rema = remote add # add remote URL
    remao = rema origin # add origin (remote) URL
    remau = rema upstream # add upstream URL
	rems = remote set-url # set remote URL
    remso = rems origin # set origin URL
    remsu = rems upstream # set upstream URL
	# add fetch command, good for large projects
	pp = !git pull && git push
    undo = reset HEAD~1
    undo2 = reset HEAD~2
    undo3 = reset HEAD~3
    rmc = rm --cached # remove from VCS
    us = reset -- # "unstage"; git reset [commit(def=HEAD)] -- <path>
    ci = check-ignore
    resethard = reset --hard
    renorm = add --renormalize .
### Hub CLI
    brow = browse
    pr="!f() { \
        BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD); \
        git push -u origin $BRANCH_NAME; \
        hub pull-request; \
    };f "
## TYPOS
#    aac = caa
#    ac = ca
## COMMAND SHORTCUTS
    v = version
    lsf = ls-files
    amend = commit --amend
    aca = "!f() { git add \"$1\"; git ca \"$1\"; }; f"
	ca = commit -S# -s # sign commit and add comment
	cam = ca -m
	caa = ca -a # stage and commit everything
	caam = caa -m
	sta = stage
	ash = sash
	sash = stash
	co = checkout
	br = branch
	di = diff
	pl = pull
	pu = push
	rem = remote
	fe = fetch
	ash = stash
	a = add
	aa = add . # stage everything to be committed
	lg = log -p
	# could maybe add some more log commands in the future
## WHAT ARE THESE BELOW??
	gr = log --graph --format=line # graph
	grd = log --graph --format=detail # graph detail
	gra = log --graph --format=line --all # graph all
	grad = log --graph --format=detail --all # graph all in detail
	showtool = ! "st() { if [ -z $1 ]; then c='HEAD'; else c=$1; fi; git difftool $c~..$c; }; st"
	info = ! "inf() { if git rev-parse ${1} >/dev/null 2>&1; then git cat-file -p $(git rev-parse ${1}); else echo Invalid object; fi }; inf"

[core]
	editor = /usr/bin/nvim # nano is a bit faster imo
    filemode = true
    ignorecase = true
[include]
	path = ~/.gitconfig.local
[commit]
	template = ~/.gitmessage.txt
	cleanup = strip
[diff]
	renames = true
[push] # http://stackoverflow.com/a/23918418/89484
	default = current
	followTags = true
[merge]
	tool = vimdiff
	renameLimit = 0
[fetch]
	prune = true
[stash]
	showPatch = true
[log]
	date = relative
[filter "lfs"]
	required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
[color]
	branch = auto
	diff = auto
	interactive = auto
	status = auto
	ui = auto
[color "status"]
	added = green
	#updated = red
	changed = cyan
	untracked = magenta
	nobranch = red white bold # not sure what this is...
[color "diff"]
	plain = dim
	meta = yellow
	frag = magenta bold
	func = cyan bold
	old = red
	new = green
	commit = blue bold
	whitespace = white reverse
[color "branch"]
	current = green bold #reverse
	local = red bold
	remote = cyan bold
	plain = magenta dim
[color "decorate"] # slots: branch, remoteBranch, tag, stash, HEAD (for git log --decorate)
[color "interactive"] # slots: prompt, header, help, error (for git add --interactive)
[hub]
	protocol = https
[help]
	#autocorrect = 1 # basically instant, refer to git-config
[gpg]
    program = gpg

[url "git@github.com:"]
    insteadOf = "gh:"
    pushInsteadOf = "gh:"

[url "git@gist.github.com:"]
    insteadOf = "gist:"
    pushInsteadOf = "gist:"

[url "git@gitlab.com:"]
    insteadOf = "gl:"
    pushInsteadOf = "gl:"
